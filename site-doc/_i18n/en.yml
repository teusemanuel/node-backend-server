header:
  title: Back-end Server Node Js with Typescript and Awesome Plugins
  description: Creation of back end servers in Node Js using typescript, mysql, promisses, Dependency Inection (DI), cerialize and jsonwebtoken
  languageImg: /node-backend-server/images/br.png
  languageAlt: Change to Portuguese language
  languageLink: pt/

index:
  useExistentStep: Use existing server created with example
  contents: Table of Contents


  confSteps:
    title: Configuration Steps
    titleId: configuration-steps
    step1: Install [Node JS](https://nodejs.org/en/ "Node Js"). Node itself is just an executable, so you donâ€™t really need to install it, but doing so will be easier and will install the node package manager (npm) as well.
    step2: Install [MySQL](http://dev.mysql.com/downloads/mysql/ "MySQL Database") to persist data.
    step3: Download the server to your computer
    step4:
      title: Download the dependencies that the project requires from the command line
      sub_0: Enter the server folder node-backend-server downloaded
      sub_1: install dependencies
      sub_2: in project root folder install typings dependencies for working with typescript
    step5:
      title: Configure database for run first time
      sub_0:
        title: in file `src/config.ts` have
        host: host of the your database
        user: user for authentication in database with the necessary privileges
        password: password utilised for user authentication in the database
        database_production: database name utilised when this server run in your production
        database_test: database name utilised when you developing your application
      sub_1:
        title: Initial script (Run in database you created)
        link: Go to [script](#user-and-providers)
    step6:
      title: Configure your secret key used to generate the hash for your authentication with the application.
      sub_0:
        title: in file `src/config.ts` change
        secret: key utilized from you application for generate a hash token. see more about [Node-JsonWebToken](https://github.com/auth0/node-jsonwebtoken "JsonWebToken from Node JS") utilization.
    step7: Build project
    step8: Run server


  components:
   title: Components
   titleId: components
   description: Utility components to assist in creating your server's business rules
   tableClass: Class
   tableDescription: Description
   tableUsage: Example usage
   utils:
    title: Utils
    row_0:
      col_0: DateUtils
      col_1: DateUtils is not only simplify code for common operations, but isolate from of the moment dependence.
    row_1:
      col_0: CommonsRepository
      col_1: CommonsRepository is not only simplify code for common operations, but isolate from of the moment dependence.
      col_2: 'Example:<br /> `...UserRepository extends CommonsRepository<UserModel> {...}`<br /><br />`let user = new UserModel();`<br /><br />`userRepository.findById(user.id, UserModel)`<br />`userRepository.save(user)`<br />`userRepository.update(user, {id: user.id})`<br />`userRepository.deleteById(user.id)`'


  codeStructure:
   title: Code Structure
   titleId: code-structure
   description: Here we will describe how was used the convension of the code, recommended practices and used in the creation of the server. <br /><br />The purpose here is to present how the server structure was made to facilitate the maintenance and creation of new functionalities and modules


  guidelines:
   title: Guidelines
   titleId: guidelines


  requestsInApp:
    title: Test Requests in app
    titleId: test-requests-in-app


  scripts:
    title: Scripts
    titleId: scripts
    userAndProviders: User and Providers
    userAndProvidersId: user-and-providers
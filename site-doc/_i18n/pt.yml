header:
  title: Servidor back-end em  Node Js com Typescript e Incriveis Plugins
  description: Criação de servidor back-end em Node Js utilizando ferramentas como typescript, mysql, promisses, Injeção de dependencia (DI), cerialize e jsonwebtoken
  languageImg: /node-backend-server/images/us.png
  languageAlt: Mudar para o idioma ingles
  languageLink: /node-backend-server/

index:
  useExistentStep: Usar servidor existente criado com o exemplo
  contents: Índice


  confSteps:
    title: Etapas para configuração
    titleId: etapas-para-configurao
    step1: Instale [Node JS](https://nodejs.org/en/ "Node Js"). O próprio Node é apenas um executável, então você realmente não precisa instalá-lo, mas fazê-lo será mais fácil e irá instalar o gerenciador de pacotes do node (npm) também.
    step2: Instale [MySQL](http://dev.mysql.com/downloads/mysql/ "MySQL Database") para salvar os dados do seu server.
    step3: Baixe o servidor para seu computador
    step4:
      title: Baixe as dependências que o projeto necessita pela linha de comando
      sub_0: Entre na pasta do servidor node-backend-server baixado
      sub_1: Instalar dependências
      sub_2: Na pasta raiz do projeto instala dependências do typings para trabalhar com typescript
    step5:
      title: Configurar banco de dados para executar pela primeira vez
      sub_0:
        title: no arquivo `src/config.ts` tem
        host: host do seu base de dados
        user: Usuário para autenticação no banco de dados com os privilégios necessários
        password: Senha utilizada para autenticação do usuário no banco de dados
        database_production: Nome do banco de dados utilizado quando este servidor é executado em produção
        database_test: Nome do banco de dados utilizado ao desenvolver o aplicativo
      sub_1:
        title: Script inicial (Executar no banco de dados que você criou)
        link: Ir para o [script](#user-and-providers)
    step6:
      title: Configure a sua chave secreta utilizada para gerar o hash para a sua autenticação com a aplicação.
      sub_0:
        title: no arquivo `src/config.ts` altere
        secret: Chave usada de sua aplicação para gerar o hash token. Veja mais sobre como utilizar [Node-JsonWebToken](https://github.com/auth0/node-jsonwebtoken "JsonWebToken para Node JS").
    step7: Compilar projeto
    step8: Iniciar servidor


  components:
   title: Componentes
   titleId: componentes
   description: Componentes utilitarios para auxiliar durante a criação das regras de negocio do seu servidor
   tableClass: Classe
   tableDescription: Descrição
   tableUsage: Exemplo de uso
   utils:
    title: Utilitarios
    row_0:
      col_0: DateUtils
      col_1: DateUtils não é apenas simplificar o código para operações comuns, mas isolar a dependência do moment.
    row_1:
      col_0: CommonsRepository
      col_1: CommonsRepository é uma classe utilitaria que pode ser utilizada por todas as classes que trabalham com persistencia de dados.
      col_2: 'Exemplo:<br /> `...UserRepository extends CommonsRepository<UserModel> {...}`<br /><br />`let user = new UserModel();`<br /><br />`userRepository.findById(user.id, UserModel)`<br />`userRepository.save(user)`<br />`userRepository.update(user, {id: user.id})`<br />`userRepository.deleteById(user.id)`'


  codeStructure:
   title: Estrutura do codigo
   titleId: estrutura-do-codigo
   description: Aqui descreveremos como foi feita a convensão de codigo, praticas recomendadas e utilizadas na criação do servidor. <br /><br />O Objetivo aqui é apresentar como foi feita a estrutura do servidor para facilitar a manutenção e criação de novas funcionalidades e modulos


  guidelines:
   title: Linhas guia para o deselvolvimento
   titleId: linhas-guia-para-o-deselvolvimento


  requestsInApp:
    title: Teste de requisições ao aplicativo
    titleId: teste-de-requisies-ao-aplicativo


  scripts:
    title: Scripts
    titleId: scripts
    userAndProviders: Usuario e provedores
    userAndProvidersId: usuario-e-provedores